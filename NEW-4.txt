======================================================================
Julius-4 変更点メモ
						2007/09/24 by ri
======================================================================
（パッケージの注意）
このパッケージに含まれる Sample*.jconf や Release*.txt などの
ドキュメントは更新されていません．
このファイルおよび "julius -help" で出力されるメッセージのみが
現在の新バージョンの情報です．
情報は随時このファイルに追加していきます．宜しくお願いします．


◆ライブラリ化

----------------------------------------
・デコード部とアプリ部の切り離し (libjulius <-> julius)
・全変数を整理してカプセル化 (libjulius/include/julius/common.h)
・メモリ管理を総見直し
・モジュール化
・j_printf()->jlog() に変更．
・コールバック化 (libjulius/include/julius/callback.h)
・API整備 (libjulius/src/jfunc.c)
----------------------------------------

"-record", "-module", "-charconv" 等のアプリよりの機能は
ライブラリから切り離され，アプリとしての julius に移動しています．

julius の使いかたはこれまでと全く同一です．

ライブラリのAPIについて，ドキュメントがまだありません．
julius/ 以下のソースを参考にしてくださると助かります．

ライブラリ上での出力はすべて jlog() 関数で行われます．
デフォルトでは標準出力になっていますが，
ファイルに出力先を変更したり，全く出力させないように
することができます．julius/main.c を参考にしてください．

======================================================================
◆言語処理の拡張

----------------------------------------
・複数タイプの言語モデルを１バイナリでサポート（N-gram, 文法，孤立単語）
・任意長・任意向きN-gram対応（2-gramのみも可）
・グラフモードの統合 (--enable-graphout  => -lattice)
・グラフベースの単語事後確率算出，グラフのバグ修正
・confusion network 出力 (-confnet)
・ユーザ定義言語確率関数サポート，N-gramとのInterpolationもサポート
・孤立単語認識モードの追加
----------------------------------------

バージョン 4 より Julius, Julian の実行バイナリ上での区別は
無くなり，１つに統合されました．文法を与えれば 旧Julian相当，N-gramを
与えれば旧Juliusとして動作します．

異なる言語制約を同時に与えると通常はエラーとなります．
（複数モデルでの同時認識は実装中です）

N-gram は前向き N-gram を -nlr, 後向きN-gram を -nrl で指定します．
どちらか一方だけでも動作しますし，両方指定することもできます．
指定方法によって以下のように動作します．
・前向きN-gram のみを与えた場合
	第1パスはその中の2-gramを使用し，
	第2パスではベイズ則に従って確率を逆向きに算出しながら探索します．
・後向きN-gram のみを与えた場合
	第1パスはその中の後向き2-gramから算出した前向き2-gram確率を使用し，
	第2パスではそのまま後向きN-gramを適用します．
・両方与えられた場合（これまでの Julius と同一）
	第1パスでは与えられた前向きN-gram中の2-gramを使用し，	
	第2パスでは与えられた後向きN-gramを適応します．

mkbingram も更新されました．上記の全てのパターンでバイナリN-gramを出力
できます．mkbingram へのN-gramの与え方は上記と同様です．

グラフを出力したい場合は実行時オプションに "-lattice" を指定します．
confusion network の場合は "-confnet" です．両方指定することもできます．

グラフベースの事後確率計算結果は，"graphcm=..." の形で出力されます．
従来の CM もそのまま"cmscore=..." で出力されます．スムージング係数
"-cmalpha" は両者で用いられます．

confusion network (CN) は単語グラフから算出されるので，CN を大きく出すに
は，これまでと同様，長く探索するよう -n 10 などを付けてください． 

ユーザ定義言語確率関数については，julius/main.c の USER_LM_TEST で
囲まれた部分を参考にしてください（あまりテスト出来ていません）．
関数は３つとも指定する必要があります．
なお，ユーザ定義関数使用時は，実行時オプションにも "-userlm" を必ず付け
てください．

孤立単語認識モードは音声インタフェース向けの機能で，
単単語の認識を高速に行うモードです．
単語間制約の近似計算を行わず，第1パスだけを実行します．
他の言語制約（文法・N-gram）との併用はいまのところできません．

使うときは文法や N-gram とは違う「単語リスト」フォーマットで
単語辞書を用意します．1行１エントリで

	読み y o m i

だけのシンプルなものです．
発話開始部・終了部の無音の扱いについてはオプション "-wsil" で指定します．

使用方法，オプションは以下の「新オプション」の項目を御覧下さい．


======================================================================
◆実装改善
----------------------------------------
・ショートポーズセグメンテーションの実装改善
・マルチパス版の統合（自動切替え）
・メモリ量削減
----------------------------------------
ショートポーズセグメンテーションのバグをいくつか直しました．
またセグメントごとの情報が詳細に callback で得られるようになりました．
julius/output_stdout.c 内の SP_BREAK_CURRENT_FRAME でくくられた部分を
御覧下さい．

マルチパス版は統合されました．音響モデルをチェックして，必要であれば
自動的にマルチパス版モードに移行します．
明示的にマルチパスモードで動作させるには，
実行時オプション "-multipath" を指定します．

メモリ量削減では，木構造化辞書において，状態間遷移の内部形式の見直しや
不要となっているデータ領域の削除，その他修正を行いました．
特に大語彙でメモリ量が削減されています．
旧バージョンとの起動時の使用メモリ量の比較は以下のとおり：


	      メモリ使用量の例 (値は VSZ / RSS)

       ------------------------------------------------
			|  3.5.3	 4.0RC1
       ------------------------------------------------
	MNP20k-dictation:  53.1/ 50.7 ->  49.1/ 47.5
	Web60k-dictation: 104.7/ 92.4 ->  95.0/ 82.0
	hatena-175k-word: over 250MB  -> 194.3/160.0
       ------------------------------------------------


======================================================================
◆ツール・その他
generate-ngram 追加
jconf での環境変数サポート
48kHz録音→16kHzダウンサンプリングサポート (-48)
オプション "-nofork" 追加

======================================================================
◆新オプション

-lattice	グラフ出力（--enable-graphout に対応）
-confnet	confusion network 出力
-48		48kHz録音→16kHzにダウンサンプリングしながら認識
-userlm		ユーザ定義の言語スコア関数を使用する際に指定する
-multipath	マルチパスモード (--enable-multipath に対応)
-nofork		モジュールモード時クライアント接続時に fork しない

-w wordlist	孤立単語認識：単語辞書を読み込む（複数回指定可能）
-wlist listfile	孤立単語認識：単語辞書のリストをファイルから読み込む
-wsil head tail context
		孤立単語認識：開始・終了の無音に対応するモデルを指定
		head: 開始部のモデル  tail: 終了部のモデル
		context: head, tail のコンテキスト上での表記（無="NULL")
		孤立単語認識モードでは，単語辞書にある音素列について，
		その前後に以下のように無音モデルがつけられて認識される．
                例1：-wsil silB silE sp と指定したとき，単語 "a b e" は

			"a b e"  ->  silB sp-a+b a-b+e b-e+sp silE

		例2: -sil sil sil NULL と指定したとき，単語 "a b e" は

			"a b e"  ->  sil a+b a-b+e b-e sil

		デフォルトは "-wil silB silE NULL" である．
		（JNAS/CSRC のモデルに合わせてある）

（以下は実験中のもの）
-wed		孤立単語認識：早期単語確定用パラメータ

